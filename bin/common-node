#!/usr/bin/env bash

function mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function node_download() {
  version="$1"
  location="$2"

  package="http://nodejs.org/dist/v$version/node-v$version-linux-x64.tar.gz"

  echo "         $version ($package) -> $location"

  mkdir -p $location
  curl $package -s -o - | tar xzf - -C $location

  echo `ls $location`

  mv -f $location/node-v${NODE_VERSION}-linux-x64/* $location
  rm -rf "$location/node-v${NODE_VERSION}-linux-x64"

  chmod +x $location/bin/*
}

function cat_npm_debug_log() {
  if [ -f $BUILD_DIR/npm-debug.log ]; then
    cat $BUILD_DIR/npm-debug.log
  fi
}

function install_node_and_build_javascripts() {

  BUILD_DIR_ORG=$BUILD_DIR
  BUILD_DIR="$BUILD_DIR_ORG"/ui

  echo "-----> Install and Build javascripts..."
  echo "         show settings"
  echo "         - BUILD_DIR=$BUILD_DIR"
  echo "         - LP_DIR=$LP_DIR"

  trap cat_npm_debug_log EXIT

  NODE_VERSION="0.10.26"
  echo "Using Node.js version: ${NODE_VERSION}" | indent

  # cache directories
  CACHE_STORE_DIR="$CACHE_DIR/node_modules/$NODE_VERSION/$NPM_VERSION"
  CACHE_TARGET_DIR="$BUILD_DIR/node_modules"

  # vendor directories
  VENDORED_NODE="$(mktmpdir node)"

  # download and unpack packages
  echo "-----> Fetching Node.js binaries"
  node_download "${NODE_VERSION}" "${VENDORED_NODE}"

  # vendor node into the slug
  PATH="$BUILD_DIR/bin:$PATH"
  echo "-----> Vendoring node into slug"
  mkdir -p "$BUILD_DIR/bin"
  cp "$VENDORED_NODE/bin/node" "$BUILD_DIR/bin/node"

  # setting up paths for building
  PATH="$VENDORED_NODE/bin:$PATH"
  INCLUDE_PATH="$VENDORED_NODE/include"
  export CPATH="$INCLUDE_PATH:$CPATH"
  export CPPPATH="$INCLUDE_PATH:$CPPPATH"

  # install dependencies with npm
  echo "-----> Installing dependencies with npm"
  cd $BUILD_DIR
  npm install
  echo "Dependencies installed" | indent

  if [ -f $BUILD_DIR/bower.json ]; then
    # make sure that bower is installed locally
    cd $BUILD_DIR
    npm install bower
    echo "-----> Found bower.json, running bower install"
    $BUILD_DIR/node_modules/.bin/bower install
  else
    echo "-----> No Bower.json found"
  fi

  if [ -f $BUILD_DIR/grunt.js ] || [ -f $BUILD_DIR/Gruntfile.js ] || [ -f $BUILD_DIR/Gruntfile.coffee ]; then
    # make sure that grunt-cli and bower are installed locally
    npm install grunt-cli
    echo "-----> Found Gruntfile, running grunt task"
    cd $BUILD_DIR
    $BUILD_DIR/node_modules/.bin/grunt dev
  else
    echo "-----> No Gruntfile (grunt.js, Gruntfile.js, Gruntfile.coffee) found"
  fi

  echo "-----> Install and Build javascripts...Done"

  BUILD_DIR=$BUILD_DIR_ORG
  cd $BUILD_DIR
}